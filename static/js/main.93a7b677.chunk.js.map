{"version":3,"sources":["logo.png","logo-navbar.svg","PresentationalComponents/IframeComponent/IframeComponent.tsx","PresentationalComponents/PageSwaggerUI/PageSwaggerUI.tsx","Routes.tsx","SmartComponents/DeleteDialog/DeleteDialog.tsx","store/deleteDialog/actions.ts","store/deleteDialog/reducer.ts","store/deleteDialog/selectors.ts","SmartComponents/DeleteDialog/index.tsx","PresentationalComponents/SidebarNav/SidebarNav.tsx","App.tsx","serviceWorker.ts","store/rootReducer.tsx","api/apiInit.tsx","index.tsx","store/index.tsx"],"names":["module","exports","IframeComponent","title","src","height","width","Fragment","className","PageSwaggerUI","origin","window","location","PageSection","variant","PageSectionVariants","light","TextContent","Text","component","AppRoutes","path","render","welcomeMessage","buttonAdministrarServidor","to","PageForbidden403","PageNotFound404","PageServiceUnavailable503","DeleteDialogBase","this","props","type","name","onDelete","onCancel","isOpen","isProcessing","isError","Modal","isSmall","onClose","actions","Button","key","isDisabled","ButtonVariant","danger","onClick","link","React","Component","openModal","createAction","closeModal","processing","error","defaultState","deleteDialogState","state","connect","deleteDialogSelectors","deleteDialogActions","SidebarNav","Nav","id","aria-label","theme","NavGroup","NavItem","activeClassName","frontendComponentsNotifications","require","App","NotificationsPortal","version","process","REACT_APP_VERSION","productName","swaggerApiURL","githubIssuesURL","documentationURL","githubSourceCodeURL","sidebarNav","brandImageSrc","navBrandImageSrc","Boolean","hostname","match","rootReducer","combineReducers","notifications","action","getType","payload","axios","defaults","baseURL","ReactDOM","store","createStore","composeWithDevTools","applyMiddleware","logger","thunk","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93a7b677.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9b4f3b1c.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-navbar.f314a279.svg\";","import React from \"react\";\nimport \"./IframeComponent.scss\";\n\ninterface Props {\n  title: string;\n  src: string;\n  height: string;\n  width: string;\n}\n\nexport const IframeComponent: React.FC<Props> = ({\n  title,\n  src,\n  height,\n  width\n}) => {\n  return (\n    <React.Fragment>\n      <iframe\n        title={title}\n        src={src}\n        height={height}\n        width={width}\n        className=\"IframeComponent_fullheight\"\n      />\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport {\n  PageSection,\n  PageSectionVariants,\n  TextContent,\n  Text\n} from \"@patternfly/react-core\";\nimport { IframeComponent } from \"../IframeComponent\";\n\ninterface Props {}\n\nexport const PageSwaggerUI: React.FC<Props> = () => {\n  // This will work only when it is deployed inside xml-builder Quarkus\n  // const origin = `http://localhost:8080/swagger-ui/`;\n  const origin = `${window.location.origin}/swagger-ui/`;\n  return (\n    <React.Fragment>\n      <PageSection variant={PageSectionVariants.light}>\n        <TextContent>\n          <Text component=\"h1\">OpenAPI v3</Text>\n          <Text component=\"small\">\n            Interactúa con todos los endpoints utilizando las herramientas que\n            te ofrecemos.\n          </Text>\n        </TextContent>\n      </PageSection>\n      <PageSection>\n        <IframeComponent\n          title=\"Swagger UI\"\n          src={origin}\n          height=\"100%\"\n          width=\"100%\"\n        />\n      </PageSection>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { Route, Switch, Redirect, Link } from \"react-router-dom\";\nimport {\n  PageHome,\n  PageForbidden403,\n  PageNotFound404,\n  PageServiceUnavailable503\n} from \"@projectopenubl/xml-builder-react\";\n\n// import { PageDocuments } from \"./PresentationalComponents/PageDocuments\";\nimport { PageSwaggerUI } from \"./PresentationalComponents/PageSwaggerUI\";\n\nexport const AppRoutes = () => {\n  return (\n    <Switch>\n      <Route\n        path=\"/home\"\n        render={() => (\n          <PageHome\n            welcomeMessage=\"Bienvenido a XML Builder\"\n            buttonAdministrarServidor={\n              <Link to=\"/swagger-ui\" className=\"pf-c-button pf-m-primary\">\n                Administrar\n              </Link>\n            }\n          />\n        )}\n      />\n\n      {/* <Route path=\"/documents\" component={PageDocuments} /> */}\n      <Route path=\"/swagger-ui\" component={PageSwaggerUI} />\n\n      <Route path=\"/error403\" component={PageForbidden403} />\n      <Route path=\"/error404\" component={PageNotFound404} />\n      <Route path=\"/error503\" component={PageServiceUnavailable503} />\n      <Route path=\"/\" render={() => <Redirect to={\"/home\"} />} />\n    </Switch>\n  );\n};\n","import { Button, Modal, ButtonVariant } from \"@patternfly/react-core\";\nimport React from \"react\";\nimport \"./DeleteDialog.scss\";\nimport { deleteDialogActions } from \"../../store/deleteDialog\";\n\ninterface Props {\n  onDelete: () => void;\n  onCancel: typeof deleteDialogActions.closeModal;\n  isOpen: boolean;\n  isProcessing: boolean;\n  isError: boolean;\n  name: string;\n  type: string;\n}\n\ninterface State {}\n\nclass DeleteDialogBase extends React.Component<Props, State> {\n  public render() {\n    const {\n      type,\n      name,\n      onDelete,\n      onCancel,\n      isOpen,\n      isProcessing,\n      isError\n    } = this.props;\n\n    return (\n      <Modal\n        isSmall={true}\n        title={`Delete ${name}?`}\n        onClose={() => {\n          onCancel();\n        }}\n        isOpen={isOpen}\n        actions={[\n          <Button\n            key=\"confirm\"\n            isDisabled={isProcessing}\n            variant={ButtonVariant.danger}\n            onClick={onDelete}\n          >\n            Delete {`${type}`}\n          </Button>,\n          <Button\n            key=\"cancel\"\n            isDisabled={isProcessing}\n            variant={ButtonVariant.link}\n            onClick={() => {\n              onCancel();\n            }}\n          >\n            Cancel\n          </Button>\n        ]}\n      >\n        {isError\n          ? `Ops! There was a problem while deleting the ${type}.`\n          : `¿Estas seguro de querer eliminar este ${type}? Esta acción eliminará todos los datos asociados a esta ${type} permanentemente.`}\n      </Modal>\n    );\n  }\n}\n\nexport default DeleteDialogBase;\n","import { AxiosError } from 'axios';\nimport { createAction } from 'typesafe-actions';\n\ninterface Item {\n  name: string;\n  type: string;\n  onDelete: () => void;\n  onCancel: () => void;\n}\n\nexport const openModal = createAction('dialog/delete/open')<Item>();\nexport const closeModal = createAction('dialog/delete/close')<void>();\nexport const processing = createAction('dialog/delete/processing')<void>();\nexport const error = createAction('dialog/delete/error')<AxiosError>();\n","import { ActionType, getType } from 'typesafe-actions';\nimport { closeModal, error, openModal, processing } from './actions';\n\nexport const stateKey = 'deleteDialog';\n\nexport type DeleteDialogState = Readonly<{\n  isOpen: boolean;\n  isProcessing: boolean;\n  isError: boolean;\n  name: string;\n  type: string;\n  onDelete: () => void;\n}>;\n\nexport const defaultState: DeleteDialogState = {\n  isOpen: false,\n  isProcessing: false,\n  isError: false,\n  name: '',\n  type: '',\n  onDelete: () => { },\n};\n\nexport type DeleteDialogAction = ActionType<\n  typeof openModal | typeof closeModal | typeof processing | typeof error\n>;\n\nexport const reducer = (\n  state: DeleteDialogState = defaultState,\n  action: DeleteDialogAction\n): DeleteDialogState => {\n  switch (action.type) {\n    case getType(openModal):\n      return {\n        ...state,\n        ...action.payload,\n        isOpen: true,\n      };\n    case getType(processing):\n      return {\n        ...state,\n        isProcessing: true,\n      };\n    case getType(closeModal):\n      return defaultState;\n    case getType(error):\n      return {\n        ...state,\n        isError: true,\n      };\n    default:\n      return state;\n  }\n};\n","import { RootState } from '../rootReducer';\nimport { stateKey } from './reducer';\n\nexport const deleteDialogState = (state: RootState) => state[stateKey];\n\nexport const isProcessing = (state: RootState) => deleteDialogState(state).isProcessing;\n\nexport const isOpen = (state: RootState) => deleteDialogState(state).isOpen;\n\nexport const isError = (state: RootState) => deleteDialogState(state).isError;\n\nexport const name = (state: RootState) => deleteDialogState(state).name;\n\nexport const type = (state: RootState) => deleteDialogState(state).type;\n\nexport const onDelete = (state: RootState) => deleteDialogState(state).onDelete;\n","import { connect } from \"react-redux\";\nimport DeleteDialogBase from \"./DeleteDialog\";\nimport {\n  deleteDialogSelectors,\n  deleteDialogActions\n} from \"../../store/deleteDialog\";\nimport { createMapStateToProps } from \"../../store/common\";\n\nexport default connect(\n  createMapStateToProps(state => ({\n    onDelete: deleteDialogSelectors.onDelete(state),\n    isOpen: deleteDialogSelectors.isOpen(state),\n    isProcessing: deleteDialogSelectors.isProcessing(state),\n    isError: deleteDialogSelectors.isError(state),\n    name: deleteDialogSelectors.name(state),\n    type: deleteDialogSelectors.type(state)\n  })),\n  {\n    onCancel: deleteDialogActions.closeModal\n  }\n)(DeleteDialogBase);\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Nav, NavItem, NavGroup } from \"@patternfly/react-core\";\nimport { HomeIcon, BookOpenIcon } from \"@patternfly/react-icons\";\n\ninterface Props {}\n\ninterface State {}\n\nexport class SidebarNav extends React.Component<Props, State> {\n  render() {\n    return (\n      <Nav id=\"nav-primary-simple\" aria-label=\"Nav\" theme=\"dark\">\n        <NavGroup title=\"\">\n          <NavItem>\n            <NavLink to=\"/home\" activeClassName=\"pf-m-current\">\n              <HomeIcon />\n              &nbsp;Home\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink to=\"/swagger-ui\" activeClassName=\"pf-m-current\">\n              <BookOpenIcon />\n              &nbsp;API Docs\n            </NavLink>\n          </NavItem>\n        </NavGroup>\n        {/* <NavGroup title=\"Consola administración\">\n          <NavItem>\n            <NavLink to={`/documents`} activeClassName=\"pf-m-current\">\n              Comprobantes electrónicos\n            </NavLink>\n          </NavItem>\n        </NavGroup> */}\n      </Nav>\n    );\n  }\n}\n","import React from \"react\";\nimport { HashRouter } from \"react-router-dom\";\nimport { AppRoutes } from \"./Routes\";\n\nimport \"./App.css\";\nimport \"./App.scss\";\n\nimport { LayoutBasicProject } from \"@projectopenubl/xml-builder-react\";\n\nimport DeleteMessageDialog from \"./SmartComponents/DeleteDialog\";\nimport { SidebarNav } from \"./PresentationalComponents/SidebarNav\";\n\nimport brandImageSrc from \"./logo.png\";\nimport navBrandImageSrc from \"./logo-navbar.svg\";\n\nimport \"@redhat-cloud-services/frontend-components-notifications/index.css\";\n\nimport \"@redhat-cloud-services/frontend-components-notifications/index.css\";\nconst frontendComponentsNotifications = require(\"@redhat-cloud-services/frontend-components-notifications\");\n\nconst App: React.FC = () => {\n  const NotificationsPortal =\n    frontendComponentsNotifications.NotificationsPortal;\n\n  return (\n    <React.Fragment>\n      <HashRouter>\n        <LayoutBasicProject\n          version={process.env.REACT_APP_VERSION || \"\"}\n          productName=\"XML Builder\"\n          swaggerApiURL=\"https://app.swaggerhub.com/apis-docs/project-openubl/xml-builder\"\n          githubIssuesURL=\"https://github.com/project-openubl/xml-builder/issues\"\n          documentationURL=\"https://project-openubl.gitbook.io/xml-builder/\"\n          githubSourceCodeURL=\"https://github.com/project-openubl/xml-builder\"\n          sidebarNav={<SidebarNav />}\n          brandImageSrc={brandImageSrc}\n          navBrandImageSrc={navBrandImageSrc}\n        >\n          <AppRoutes />\n          <DeleteMessageDialog />\n          <NotificationsPortal />\n        </LayoutBasicProject>\n      </HashRouter>\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { StateType } from \"typesafe-actions\";\n\nimport { deleteDialogStateKey, deleteDialogReducer } from \"./deleteDialog\";\n\nconst frontendComponentsNotifications = require(\"@redhat-cloud-services/frontend-components-notifications\");\n\nexport type RootState = StateType<typeof rootReducer>;\n\nexport const rootReducer = combineReducers({\n  notifications: frontendComponentsNotifications.notifications,\n  [deleteDialogStateKey]: deleteDialogReducer\n});\n","import axios from \"axios\";\n\nexport const API_BASE_URL = \"/api\";\n\nexport const initApi = () => {\n  axios.defaults.baseURL = `${API_BASE_URL}`;\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\nimport { initApi } from \"./api/apiInit\";\n\ninitApi();\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { rootReducer } from \"./rootReducer\";\n\nexport default function configureStore() {\n  return createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(logger, thunk))\n  );\n}\n"],"sourceRoot":""}